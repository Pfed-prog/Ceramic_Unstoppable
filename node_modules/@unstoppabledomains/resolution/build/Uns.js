"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var types_1 = require("./types");
var proxyReader_1 = __importDefault(require("./contracts/uns/proxyReader"));
var registry_1 = __importDefault(require("./contracts/uns/registry"));
var resolver_1 = __importDefault(require("./contracts/uns/resolver"));
var resolutionError_1 = __importStar(require("./errors/resolutionError"));
var EthereumContract_1 = __importDefault(require("./contracts/EthereumContract"));
var utils_1 = require("./utils");
var publicTypes_1 = require("./types/publicTypes");
var TwitterSignatureValidator_1 = require("./utils/TwitterSignatureValidator");
var uns_config_json_1 = __importDefault(require("./config/uns-config.json"));
var FetchProvider_1 = __importDefault(require("./FetchProvider"));
var namehash_1 = require("./utils/namehash");
var NamingService_1 = require("./NamingService");
var configurationError_1 = __importStar(require("./errors/configurationError"));
var resolver_keys_json_1 = __importDefault(require("./config/resolver-keys.json"));
var abi_1 = require("@ethersproject/abi");
/**
 * @internal
 */
var Uns = /** @class */ (function (_super) {
    __extends(Uns, _super);
    function Uns(source) {
        if (source === void 0) { source = { url: Uns.UrlMap[1], network: 'mainnet' }; }
        var _this = _super.call(this) || this;
        _this.name = publicTypes_1.NamingServiceName.UNS;
        _this.checkNetworkConfig(source);
        _this.network = utils_1.EthereumNetworks[source.network];
        _this.url = source['url'] || Uns.UrlMap[_this.network];
        _this.provider =
            source['provider'] || new FetchProvider_1.default(_this.name, _this.url);
        _this.readerContract = new EthereumContract_1.default(proxyReader_1.default, source['proxyReaderAddress'] || Uns.ProxyReaderMap[_this.network], _this.provider);
        return _this;
    }
    Uns.autoNetwork = function (config) {
        return __awaiter(this, void 0, void 0, function () {
            var provider, networkId, networkName;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (types_1.hasProvider(config)) {
                            provider = config.provider;
                        }
                        else {
                            if (!config.url) {
                                throw new configurationError_1.default(configurationError_1.ConfigurationErrorCode.UnspecifiedUrl, {
                                    method: publicTypes_1.NamingServiceName.UNS,
                                });
                            }
                            provider = FetchProvider_1.default.factory(publicTypes_1.NamingServiceName.UNS, config.url);
                        }
                        return [4 /*yield*/, provider.request({
                                method: 'net_version',
                            })];
                    case 1:
                        networkId = (_a.sent());
                        networkName = utils_1.EthereumNetworksInverted[networkId];
                        if (!networkName || !types_1.UnsSupportedNetwork.guard(networkName)) {
                            throw new configurationError_1.default(configurationError_1.ConfigurationErrorCode.UnsupportedNetwork, {
                                method: publicTypes_1.NamingServiceName.UNS,
                            });
                        }
                        return [2 /*return*/, new this({ network: networkName, provider: provider })];
                }
            });
        });
    };
    Uns.prototype.namehash = function (domain) {
        if (!this.checkDomain(domain)) {
            throw new resolutionError_1.default(resolutionError_1.ResolutionErrorCode.UnsupportedDomain, {
                domain: domain,
            });
        }
        return namehash_1.eip137Namehash(domain);
    };
    Uns.prototype.childhash = function (parentHash, label) {
        return namehash_1.eip137Childhash(parentHash, label);
    };
    Uns.prototype.serviceName = function () {
        return this.name;
    };
    Uns.prototype.isSupportedDomain = function (domain) {
        return __awaiter(this, void 0, void 0, function () {
            var tld, exists;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this.checkDomain(domain)) {
                            return [2 /*return*/, false];
                        }
                        tld = domain.split('.').pop();
                        if (!tld) {
                            return [2 /*return*/, false];
                        }
                        return [4 /*yield*/, this.readerContract.call('exists', [
                                this.namehash(tld),
                            ])];
                    case 1:
                        exists = (_a.sent())[0];
                        return [2 /*return*/, exists];
                }
            });
        });
    };
    Uns.prototype.owner = function (domain) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getVerifiedData(domain)];
                    case 1: return [2 /*return*/, (_a.sent()).owner];
                }
            });
        });
    };
    Uns.prototype.resolver = function (domain) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getVerifiedData(domain)];
                    case 1: return [2 /*return*/, (_a.sent()).resolver];
                }
            });
        });
    };
    Uns.prototype.record = function (domain, key) {
        return __awaiter(this, void 0, void 0, function () {
            var returnee;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.records(domain, [key])];
                    case 1:
                        returnee = (_a.sent())[key];
                        if (!returnee) {
                            throw new resolutionError_1.default(resolutionError_1.ResolutionErrorCode.RecordNotFound, {
                                recordName: key,
                                domain: domain,
                            });
                        }
                        return [2 /*return*/, returnee];
                }
            });
        });
    };
    Uns.prototype.records = function (domain, keys) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getVerifiedData(domain, keys)];
                    case 1: return [2 /*return*/, (_a.sent()).records];
                }
            });
        });
    };
    Uns.prototype.allRecords = function (domain) {
        return __awaiter(this, void 0, void 0, function () {
            var tokenId, resolver, resolverContract;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        tokenId = this.namehash(domain);
                        return [4 /*yield*/, this.resolver(domain)];
                    case 1:
                        resolver = _a.sent();
                        resolverContract = new EthereumContract_1.default(resolver_1.default, resolver, this.provider);
                        if (!this.isLegacyResolver(resolver)) return [3 /*break*/, 3];
                        return [4 /*yield*/, this.getStandardRecords(tokenId)];
                    case 2: return [2 /*return*/, _a.sent()];
                    case 3: return [4 /*yield*/, this.getAllRecords(resolverContract, tokenId)];
                    case 4: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    Uns.prototype.twitter = function (domain) {
        return __awaiter(this, void 0, void 0, function () {
            var tokenId, keys, data, records, validationSignature, twitterHandle, owner;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        tokenId = this.namehash(domain);
                        keys = [
                            'validation.social.twitter.username',
                            'social.twitter.username',
                        ];
                        return [4 /*yield*/, this.getVerifiedData(domain, keys)];
                    case 1:
                        data = _a.sent();
                        records = data.records;
                        validationSignature = records['validation.social.twitter.username'];
                        twitterHandle = records['social.twitter.username'];
                        if (utils_1.isNullAddress(validationSignature)) {
                            throw new resolutionError_1.default(resolutionError_1.ResolutionErrorCode.RecordNotFound, {
                                domain: domain,
                                recordName: 'validation.social.twitter.username',
                            });
                        }
                        if (!twitterHandle) {
                            throw new resolutionError_1.default(resolutionError_1.ResolutionErrorCode.RecordNotFound, {
                                domain: domain,
                                recordName: 'social.twitter.username',
                            });
                        }
                        owner = data.owner;
                        if (!TwitterSignatureValidator_1.isValidTwitterSignature({
                            tokenId: tokenId,
                            owner: owner,
                            twitterHandle: twitterHandle,
                            validationSignature: validationSignature,
                        })) {
                            throw new resolutionError_1.default(resolutionError_1.ResolutionErrorCode.InvalidTwitterVerification, {
                                domain: domain,
                            });
                        }
                        return [2 /*return*/, twitterHandle];
                }
            });
        });
    };
    Uns.prototype.reverse = function (address, currencyTicker) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                throw new resolutionError_1.default(resolutionError_1.ResolutionErrorCode.UnsupportedMethod, {
                    methodName: 'reverse',
                });
            });
        });
    };
    Uns.prototype.isRegistered = function (domain) {
        return __awaiter(this, void 0, void 0, function () {
            var tokenId, data;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        tokenId = this.namehash(domain);
                        return [4 /*yield*/, this.get(tokenId, [])];
                    case 1:
                        data = _a.sent();
                        return [2 /*return*/, !utils_1.isNullAddress(data.owner)];
                }
            });
        });
    };
    Uns.prototype.getTokenUri = function (tokenId) {
        return __awaiter(this, void 0, void 0, function () {
            var tokenUri, error_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, this.readerContract.call('tokenURI', [tokenId])];
                    case 1:
                        tokenUri = (_a.sent())[0];
                        return [2 /*return*/, tokenUri];
                    case 2:
                        error_1 = _a.sent();
                        if (error_1 instanceof resolutionError_1.default &&
                            error_1.code === resolutionError_1.ResolutionErrorCode.ServiceProviderError &&
                            error_1.message === '< execution reverted >') {
                            throw new resolutionError_1.default(resolutionError_1.ResolutionErrorCode.UnregisteredDomain, {
                                method: publicTypes_1.NamingServiceName.UNS,
                                methodName: 'getTokenUri',
                            });
                        }
                        throw error_1;
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    Uns.prototype.isAvailable = function (domain) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.isRegistered(domain)];
                    case 1: return [2 /*return*/, !(_a.sent())];
                }
            });
        });
    };
    Uns.prototype.registryAddress = function (domainOrNamehash) {
        return __awaiter(this, void 0, void 0, function () {
            var namehash, address;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this.checkDomain(domainOrNamehash, domainOrNamehash.startsWith('0x'))) {
                            throw new resolutionError_1.default(resolutionError_1.ResolutionErrorCode.UnsupportedDomain, {
                                domain: domainOrNamehash,
                            });
                        }
                        namehash = domainOrNamehash.startsWith('0x')
                            ? domainOrNamehash
                            : this.namehash(domainOrNamehash);
                        return [4 /*yield*/, this.readerContract.call('registryOf', [namehash])];
                    case 1:
                        address = (_a.sent())[0];
                        if (address === types_1.NullAddress) {
                            throw new resolutionError_1.default(resolutionError_1.ResolutionErrorCode.UnregisteredDomain, {
                                domain: domainOrNamehash,
                            });
                        }
                        return [2 /*return*/, address];
                }
            });
        });
    };
    Uns.prototype.getDomainFromTokenId = function (tokenId) {
        return __awaiter(this, void 0, void 0, function () {
            var registryAddress, registryContract, startingBlock, newURIEvents, rawData, decoded;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.registryAddress(tokenId)];
                    case 1:
                        registryAddress = _a.sent();
                        registryContract = new EthereumContract_1.default(registry_1.default, registryAddress, this.provider);
                        startingBlock = this.getStartingBlockFromRegistry(registryAddress);
                        return [4 /*yield*/, registryContract.fetchLogs('NewURI', tokenId, startingBlock)];
                    case 2:
                        newURIEvents = _a.sent();
                        if (!newURIEvents || newURIEvents.length === 0) {
                            throw new resolutionError_1.default(resolutionError_1.ResolutionErrorCode.UnregisteredDomain, {
                                domain: "with tokenId " + tokenId,
                            });
                        }
                        rawData = newURIEvents[newURIEvents.length - 1].data;
                        decoded = abi_1.Interface.getAbiCoder().decode(['string'], rawData);
                        return [2 /*return*/, decoded[decoded.length - 1]];
                }
            });
        });
    };
    Uns.prototype.location = function (domain) {
        return __awaiter(this, void 0, void 0, function () {
            var tokenId, _a, registry, _b, resolver, owner;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        tokenId = this.namehash(domain);
                        return [4 /*yield*/, Promise.all([
                                this.registryAddress(domain),
                                this.get(tokenId),
                            ])];
                    case 1:
                        _a = _c.sent(), registry = _a[0], _b = _a[1], resolver = _b.resolver, owner = _b.owner;
                        return [2 /*return*/, {
                                registry: registry,
                                resolver: resolver,
                                networkId: this.network,
                                blockchain: publicTypes_1.BlockchainType.ETH,
                                owner: owner,
                            }];
                }
            });
        });
    };
    Uns.prototype.getStartingBlockFromRegistry = function (registryAddress) {
        var contractDetails = Object.values(uns_config_json_1.default === null || uns_config_json_1.default === void 0 ? void 0 : uns_config_json_1.default.networks).reduce(function (acc, network) {
            var contracts = network.contracts;
            return __spreadArrays(acc, Object.values(contracts).map(function (c) { return ({
                address: c.address,
                deploymentBlock: c.deploymentBlock,
            }); }));
        }, []);
        var contractDetail = contractDetails.find(function (detail) { return detail.address === registryAddress; });
        if (!contractDetail || (contractDetail === null || contractDetail === void 0 ? void 0 : contractDetail.deploymentBlock) === '0x0') {
            return 'earliest';
        }
        return contractDetail.deploymentBlock;
    };
    Uns.prototype.getVerifiedData = function (domain, keys) {
        return __awaiter(this, void 0, void 0, function () {
            var tokenId, data;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        tokenId = this.namehash(domain);
                        return [4 /*yield*/, this.get(tokenId, keys)];
                    case 1:
                        data = _a.sent();
                        if (utils_1.isNullAddress(data.resolver)) {
                            if (utils_1.isNullAddress(data.owner)) {
                                throw new resolutionError_1.default(resolutionError_1.ResolutionErrorCode.UnregisteredDomain, {
                                    domain: domain,
                                });
                            }
                            throw new resolutionError_1.default(resolutionError_1.ResolutionErrorCode.UnspecifiedResolver, {
                                domain: domain,
                            });
                        }
                        return [2 /*return*/, data];
                }
            });
        });
    };
    Uns.prototype.getStandardRecords = function (tokenId) {
        return __awaiter(this, void 0, void 0, function () {
            var keys;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        keys = Object.keys(resolver_keys_json_1.default.keys);
                        return [4 /*yield*/, this.getMany(tokenId, keys)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    Uns.prototype.getAllRecords = function (resolverContract, tokenId) {
        return __awaiter(this, void 0, void 0, function () {
            var startingBlock, logs, keyTopics;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getStartingBlock(resolverContract, tokenId)];
                    case 1:
                        startingBlock = _a.sent();
                        return [4 /*yield*/, this.getNewKeyEvents(resolverContract, tokenId, startingBlock || 'earliest')];
                    case 2:
                        logs = _a.sent();
                        keyTopics = logs.map(function (event) { return event.topics[2]; });
                        if (!(keyTopics.length === 0)) return [3 /*break*/, 4];
                        return [4 /*yield*/, this.getStandardRecords(tokenId)];
                    case 3: return [2 /*return*/, _a.sent()];
                    case 4: return [4 /*yield*/, this.getManyByHash(tokenId, keyTopics)];
                    case 5: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    Uns.prototype.getMany = function (tokenId, keys) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.get(tokenId, keys)];
                    case 1: return [2 /*return*/, (_a.sent()).records];
                }
            });
        });
    };
    Uns.prototype.getManyByHash = function (tokenId, hashes) {
        return __awaiter(this, void 0, void 0, function () {
            var _a, keys, values;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, this.readerContract.call('getManyByHash', [
                            hashes,
                            tokenId,
                        ])];
                    case 1:
                        _a = (_b.sent()), keys = _a[0], values = _a[1];
                        return [2 /*return*/, utils_1.constructRecords(keys, values)];
                }
            });
        });
    };
    Uns.prototype.get = function (tokenId, keys) {
        if (keys === void 0) { keys = []; }
        return __awaiter(this, void 0, void 0, function () {
            var _a, resolver, owner, values;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, this.readerContract.call('getData', [keys, tokenId])];
                    case 1:
                        _a = _b.sent(), resolver = _a[0], owner = _a[1], values = _a[2];
                        return [2 /*return*/, { owner: owner, resolver: resolver, records: utils_1.constructRecords(keys, values) }];
                }
            });
        });
    };
    Uns.prototype.isLegacyResolver = function (resolverAddress) {
        return this.isWellKnownLegacyResolver(resolverAddress);
    };
    Uns.prototype.isWellKnownLegacyResolver = function (resolverAddress) {
        var _a, _b, _c;
        var legacyAddresses = (_c = (_b = (_a = uns_config_json_1.default === null || uns_config_json_1.default === void 0 ? void 0 : uns_config_json_1.default.networks[this.network]) === null || _a === void 0 ? void 0 : _a.contracts) === null || _b === void 0 ? void 0 : _b.Resolver) === null || _c === void 0 ? void 0 : _c.legacyAddresses;
        if (!legacyAddresses || legacyAddresses.length === 0) {
            return false;
        }
        return (legacyAddresses.findIndex(function (address) {
            return address.toLowerCase() === resolverAddress.toLowerCase();
        }) > -1);
    };
    Uns.prototype.getStartingBlock = function (contract, tokenId) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var defaultStartingBlock, logs, lastResetEvent;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        defaultStartingBlock = (_c = (_b = (_a = uns_config_json_1.default === null || uns_config_json_1.default === void 0 ? void 0 : uns_config_json_1.default.networks[this.network]) === null || _a === void 0 ? void 0 : _a.contracts) === null || _b === void 0 ? void 0 : _b.Resolver) === null || _c === void 0 ? void 0 : _c.deploymentBlock;
                        return [4 /*yield*/, contract.fetchLogs('ResetRecords', tokenId)];
                    case 1:
                        logs = _d.sent();
                        lastResetEvent = logs[logs.length - 1];
                        return [2 /*return*/, (lastResetEvent === null || lastResetEvent === void 0 ? void 0 : lastResetEvent.blockNumber) || defaultStartingBlock];
                }
            });
        });
    };
    Uns.prototype.checkDomain = function (domain, passIfTokenID) {
        if (passIfTokenID === void 0) { passIfTokenID = false; }
        if (passIfTokenID) {
            return true;
        }
        var tokens = domain.split('.');
        return (!!tokens.length &&
            tokens[tokens.length - 1] !== 'zil' &&
            !(domain === 'eth' ||
                /^[^-]*[^-]*\.(eth|luxe|xyz|kred|addr\.reverse)$/.test(domain)) &&
            tokens.every(function (v) { return !!v.length; }));
    };
    Uns.prototype.getNewKeyEvents = function (resolverContract, tokenId, startingBlock) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, resolverContract.fetchLogs('NewKey', tokenId, startingBlock)];
            });
        });
    };
    Uns.prototype.checkNetworkConfig = function (source) {
        if (!source.network) {
            throw new configurationError_1.default(configurationError_1.ConfigurationErrorCode.UnsupportedNetwork, {
                method: this.name,
            });
        }
        if (!types_1.UnsSupportedNetwork.guard(source.network)) {
            this.checkCustomNetworkConfig(source);
        }
    };
    Uns.prototype.checkCustomNetworkConfig = function (source) {
        if (!this.isValidProxyReader(source.proxyReaderAddress)) {
            throw new configurationError_1.default(configurationError_1.ConfigurationErrorCode.InvalidConfigurationField, {
                method: this.name,
                field: 'proxyReaderAddress',
            });
        }
        if (!source['url'] && !source['provider']) {
            throw new configurationError_1.default(configurationError_1.ConfigurationErrorCode.CustomNetworkConfigMissing, {
                method: this.name,
                config: 'url or provider',
            });
        }
    };
    Uns.prototype.isValidProxyReader = function (address) {
        if (!address) {
            throw new configurationError_1.default(configurationError_1.ConfigurationErrorCode.CustomNetworkConfigMissing, {
                method: this.name,
                config: 'proxyReaderAddress',
            });
        }
        var ethLikePattern = new RegExp('^0x[a-fA-F0-9]{40}$');
        return ethLikePattern.test(address);
    };
    Uns.ProxyReaderMap = getProxyReaderMap();
    Uns.UrlMap = {
        1: 'https://mainnet.infura.io/v3/c4bb906ed6904c42b19c95825fe55f39',
        4: 'https://rinkeby.infura.io/v3/c4bb906ed6904c42b19c95825fe55f39',
    };
    return Uns;
}(NamingService_1.NamingService));
exports.default = Uns;
function getProxyReaderMap() {
    var map = {};
    for (var _i = 0, _a = Object.keys(uns_config_json_1.default.networks); _i < _a.length; _i++) {
        var id = _a[_i];
        map[id] =
            uns_config_json_1.default.networks[id].contracts.ProxyReader.address.toLowerCase();
    }
    return map;
}

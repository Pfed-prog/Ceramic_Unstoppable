"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var ens_1 = __importDefault(require("./contracts/ens/ens"));
var resolver_1 = __importDefault(require("./contracts/ens/resolver"));
var types_1 = require("./types");
var resolutionError_1 = require("./errors/resolutionError");
var EthereumContract_1 = __importDefault(require("./contracts/EthereumContract"));
var ethereum_ens_network_map_1 = __importDefault(require("ethereum-ens-network-map"));
var publicTypes_1 = require("./types/publicTypes");
var utils_1 = require("./utils");
var FetchProvider_1 = __importDefault(require("./FetchProvider"));
var namehash_1 = require("./utils/namehash");
var NamingService_1 = require("./NamingService");
var configurationError_1 = __importStar(require("./errors/configurationError"));
var utils_2 = require("./utils");
var requireOrFail_1 = require("./utils/requireOrFail");
/**
 * @internal
 */
var Ens = /** @class */ (function (_super) {
    __extends(Ens, _super);
    function Ens(source) {
        if (source === void 0) { source = {
            url: Ens.UrlMap[1],
            network: 'mainnet',
        }; }
        var _this = _super.call(this) || this;
        _this.name = publicTypes_1.NamingServiceName.ENS;
        _this.checkNetworkConfig(source);
        _this.network = utils_2.EthereumNetworks[source.network];
        _this.url = source['url'] || Ens.UrlMap[_this.network];
        _this.provider =
            source['provider'] || new FetchProvider_1.default(_this.name, _this.url);
        var registryAddress = source['registryAddress'] || ethereum_ens_network_map_1.default[_this.network];
        _this.readerContract = new EthereumContract_1.default(ens_1.default, registryAddress, _this.provider);
        return _this;
    }
    Ens.autoNetwork = function (config) {
        return __awaiter(this, void 0, void 0, function () {
            var provider, networkId, networkName;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (types_1.hasProvider(config)) {
                            provider = config.provider;
                        }
                        else {
                            if (!config.url) {
                                throw new configurationError_1.default(configurationError_1.ConfigurationErrorCode.UnspecifiedUrl, {
                                    method: publicTypes_1.NamingServiceName.ENS,
                                });
                            }
                            provider = FetchProvider_1.default.factory(publicTypes_1.NamingServiceName.ENS, config.url);
                        }
                        return [4 /*yield*/, provider.request({
                                method: 'net_version',
                            })];
                    case 1:
                        networkId = (_a.sent());
                        networkName = utils_1.EthereumNetworksInverted[networkId];
                        if (!networkName || !types_1.EnsSupportedNetwork.guard(networkName)) {
                            throw new configurationError_1.default(configurationError_1.ConfigurationErrorCode.UnsupportedNetwork, {
                                method: publicTypes_1.NamingServiceName.ENS,
                            });
                        }
                        return [2 /*return*/, new this({ network: networkName, provider: provider })];
                }
            });
        });
    };
    Ens.prototype.serviceName = function () {
        return this.name;
    };
    Ens.prototype.namehash = function (domain) {
        if (!this.checkSupportedDomain(domain)) {
            throw new resolutionError_1.ResolutionError(resolutionError_1.ResolutionErrorCode.UnsupportedDomain, {
                domain: domain,
            });
        }
        return namehash_1.eip137Namehash(domain);
    };
    Ens.prototype.childhash = function (parentHash, label) {
        return namehash_1.eip137Childhash(parentHash, label);
    };
    Ens.prototype.isSupportedDomain = function (domain) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.checkSupportedDomain(domain)];
            });
        });
    };
    Ens.prototype.owner = function (domain) {
        return __awaiter(this, void 0, void 0, function () {
            var namehash;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        namehash = this.namehash(domain);
                        return [4 /*yield*/, this.callMethod(this.readerContract, 'owner', [namehash])];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    Ens.prototype.resolver = function (domain) {
        return __awaiter(this, void 0, void 0, function () {
            var nodeHash, resolverAddr;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        nodeHash = this.namehash(domain);
                        return [4 /*yield*/, this.callMethod(this.readerContract, 'resolver', [nodeHash])];
                    case 1:
                        resolverAddr = _a.sent();
                        if (utils_1.isNullAddress(resolverAddr)) {
                            throw new resolutionError_1.ResolutionError(resolutionError_1.ResolutionErrorCode.UnspecifiedResolver);
                        }
                        return [2 /*return*/, resolverAddr];
                }
            });
        });
    };
    Ens.prototype.record = function (domain, key) {
        return __awaiter(this, void 0, void 0, function () {
            var returnee;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.records(domain, [key])];
                    case 1:
                        returnee = (_a.sent())[key];
                        if (!returnee) {
                            throw new resolutionError_1.ResolutionError(resolutionError_1.ResolutionErrorCode.RecordNotFound, {
                                domain: domain,
                                recordName: key,
                            });
                        }
                        return [2 /*return*/, returnee];
                }
            });
        });
    };
    Ens.prototype.records = function (domain, keys) {
        return __awaiter(this, void 0, void 0, function () {
            var values;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, Promise.all(keys.map(function (key) { return __awaiter(_this, void 0, void 0, function () {
                            var ticker, ensRecordName;
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0:
                                        if (!key.startsWith('crypto.')) return [3 /*break*/, 2];
                                        ticker = key.split('.')[1];
                                        return [4 /*yield*/, this.addr(domain, ticker)];
                                    case 1: return [2 /*return*/, _a.sent()];
                                    case 2:
                                        if (!(key === 'ipfs.html.value' || key === 'dweb.ipfs.hash')) return [3 /*break*/, 4];
                                        return [4 /*yield*/, this.getContentHash(domain)];
                                    case 3: return [2 /*return*/, _a.sent()];
                                    case 4:
                                        ensRecordName = this.fromUDRecordNameToENS(key);
                                        return [4 /*yield*/, this.getTextRecord(domain, ensRecordName)];
                                    case 5: return [2 /*return*/, _a.sent()];
                                }
                            });
                        }); }))];
                    case 1:
                        values = _a.sent();
                        return [2 /*return*/, utils_1.constructRecords(keys, values)];
                }
            });
        });
    };
    Ens.prototype.reverse = function (address, currencyTicker) {
        return __awaiter(this, void 0, void 0, function () {
            var reverseAddress, nodeHash, resolverAddress, resolverContract;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (currencyTicker != 'ETH') {
                            throw new Error("Ens doesn't support any currency other than ETH");
                        }
                        if (address.startsWith('0x')) {
                            address = address.substr(2);
                        }
                        reverseAddress = address + '.addr.reverse';
                        nodeHash = this.namehash(reverseAddress);
                        return [4 /*yield*/, this.resolver(reverseAddress).catch(function (err) {
                                if (err.code === resolutionError_1.ResolutionErrorCode.UnspecifiedResolver) {
                                    return null;
                                }
                                throw err;
                            })];
                    case 1:
                        resolverAddress = _a.sent();
                        if (utils_1.isNullAddress(resolverAddress)) {
                            return [2 /*return*/, null];
                        }
                        resolverContract = new EthereumContract_1.default(resolver_1.default(resolverAddress, types_1.EthCoinIndex), resolverAddress, this.provider);
                        return [4 /*yield*/, this.resolverCallToName(resolverContract, nodeHash)];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    Ens.prototype.getTokenUri = function (tokenId) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                throw new resolutionError_1.ResolutionError(resolutionError_1.ResolutionErrorCode.UnsupportedMethod, {
                    method: publicTypes_1.NamingServiceName.ENS,
                    methodName: 'getTokenUri',
                });
            });
        });
    };
    Ens.prototype.isAvailable = function (domain) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.isRegistered(domain)];
                    case 1: return [2 /*return*/, !(_a.sent())];
                }
            });
        });
    };
    Ens.prototype.registryAddress = function (domain) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.readerContract.address];
            });
        });
    };
    Ens.prototype.isRegistered = function (domain) {
        return __awaiter(this, void 0, void 0, function () {
            var address;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.owner(domain)];
                    case 1:
                        address = _a.sent();
                        return [2 /*return*/, !utils_1.isNullAddress(address)];
                }
            });
        });
    };
    Ens.prototype.getDomainFromTokenId = function (tokenId) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                throw new resolutionError_1.ResolutionError(resolutionError_1.ResolutionErrorCode.UnsupportedMethod, {
                    method: publicTypes_1.NamingServiceName.ENS,
                    methodName: 'getDomainFromTokenId',
                });
            });
        });
    };
    Ens.prototype.location = function (domain) {
        return __awaiter(this, void 0, void 0, function () {
            var _a, registry, resolver, owner;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, Promise.all([
                            this.registryAddress(domain),
                            this.resolver(domain),
                            this.owner(domain),
                        ])];
                    case 1:
                        _a = _b.sent(), registry = _a[0], resolver = _a[1], owner = _a[2];
                        return [2 /*return*/, {
                                registry: registry,
                                resolver: resolver,
                                networkId: this.network,
                                blockchain: publicTypes_1.BlockchainType.ETH,
                                owner: owner,
                            }];
                }
            });
        });
    };
    /**
     * This was done to make automated tests more configurable
     */
    Ens.prototype.resolverCallToName = function (resolverContract, nodeHash) {
        return this.callMethod(resolverContract, 'name', [nodeHash]);
    };
    Ens.prototype.twitter = function (domain) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                throw new resolutionError_1.ResolutionError(resolutionError_1.ResolutionErrorCode.UnsupportedMethod, {
                    domain: domain,
                    methodName: 'twitter',
                });
            });
        });
    };
    Ens.prototype.allRecords = function (domain) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                throw new resolutionError_1.ResolutionError(resolutionError_1.ResolutionErrorCode.UnsupportedMethod, {
                    domain: domain,
                    methodName: 'allRecords',
                });
            });
        });
    };
    Ens.prototype.getCoinType = function (currencyTicker) {
        var bip44constants = requireOrFail_1.requireOrFail('bip44-constants', 'bip44-constants', '^8.0.5');
        var formatsByCoinType = requireOrFail_1.requireOrFail('@ensdomains/address-encoder', '@ensdomains/address-encoder', '>= 0.1.x <= 0.2.x').formatsByCoinType;
        var coin = bip44constants.findIndex(function (item) {
            return item[1] === currencyTicker.toUpperCase() ||
                item[2] === currencyTicker.toUpperCase();
        });
        if (coin < 0 || !formatsByCoinType[coin]) {
            throw new resolutionError_1.ResolutionError(resolutionError_1.ResolutionErrorCode.UnsupportedCurrency, {
                currencyTicker: currencyTicker,
            });
        }
        return coin.toString();
    };
    Ens.prototype.fromUDRecordNameToENS = function (record) {
        var mapper = {
            'ipfs.redirect_domain.value': 'url',
            'browser.redirect_url': 'url',
            'whois.email.value': 'email',
            'gundb.username.value': 'gundb_username',
            'gundb.public_key.value': 'gundb_public_key',
        };
        return mapper[record] || record;
    };
    Ens.prototype.addr = function (domain, currencyTicker) {
        return __awaiter(this, void 0, void 0, function () {
            var resolver, owner, cointType;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.resolver(domain).catch(function (err) {
                            if (err.code !== resolutionError_1.ResolutionErrorCode.UnspecifiedResolver) {
                                throw err;
                            }
                        })];
                    case 1:
                        resolver = _a.sent();
                        if (!!resolver) return [3 /*break*/, 3];
                        return [4 /*yield*/, this.owner(domain)];
                    case 2:
                        owner = _a.sent();
                        if (utils_1.isNullAddress(owner)) {
                            throw new resolutionError_1.ResolutionError(resolutionError_1.ResolutionErrorCode.UnregisteredDomain, {
                                domain: domain,
                            });
                        }
                        throw new resolutionError_1.ResolutionError(resolutionError_1.ResolutionErrorCode.UnspecifiedResolver, {
                            domain: domain,
                        });
                    case 3:
                        cointType = this.getCoinType(currencyTicker.toUpperCase());
                        return [4 /*yield*/, this.fetchAddress(resolver, domain, cointType)];
                    case 4: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    Ens.prototype.fetchAddress = function (resolver, domain, coinType) {
        return __awaiter(this, void 0, void 0, function () {
            var formatsByCoinType, resolverContract, nodeHash, addr, _a, data;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        formatsByCoinType = requireOrFail_1.requireOrFail('@ensdomains/address-encoder', '@ensdomains/address-encoder', '>= 0.1.x <= 0.2.x').formatsByCoinType;
                        resolverContract = new EthereumContract_1.default(resolver_1.default(resolver, coinType), resolver, this.provider);
                        nodeHash = this.namehash(domain);
                        if (!(coinType !== types_1.EthCoinIndex)) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.callMethod(resolverContract, 'addr', [nodeHash, coinType])];
                    case 1:
                        _a = _b.sent();
                        return [3 /*break*/, 4];
                    case 2: return [4 /*yield*/, this.callMethod(resolverContract, 'addr', [nodeHash])];
                    case 3:
                        _a = _b.sent();
                        _b.label = 4;
                    case 4:
                        addr = _a;
                        if (utils_1.isNullAddress(addr)) {
                            return [2 /*return*/, undefined];
                        }
                        data = Buffer.from(addr.replace('0x', ''), 'hex');
                        return [2 /*return*/, formatsByCoinType[coinType].encoder(data)];
                }
            });
        });
    };
    Ens.prototype.getTextRecord = function (domain, key) {
        return __awaiter(this, void 0, void 0, function () {
            var nodeHash, resolver;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        nodeHash = this.namehash(domain);
                        return [4 /*yield*/, this.getResolverContract(domain)];
                    case 1:
                        resolver = _a.sent();
                        return [4 /*yield*/, this.callMethod(resolver, 'text', [nodeHash, key])];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    Ens.prototype.getContentHash = function (domain) {
        return __awaiter(this, void 0, void 0, function () {
            var contentHash, nodeHash, resolverContract, contentHashEncoded, codec;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        contentHash = requireOrFail_1.requireOrFail('content-hash', 'content-hash', '^2.5.2');
                        nodeHash = this.namehash(domain);
                        return [4 /*yield*/, this.getResolverContract(domain)];
                    case 1:
                        resolverContract = _a.sent();
                        return [4 /*yield*/, this.callMethod(resolverContract, 'contenthash', [nodeHash])];
                    case 2:
                        contentHashEncoded = _a.sent();
                        codec = contentHash.getCodec(contentHashEncoded);
                        if (codec !== 'ipfs-ns') {
                            return [2 /*return*/, undefined];
                        }
                        return [2 /*return*/, contentHash.decode(contentHashEncoded)];
                }
            });
        });
    };
    Ens.prototype.getResolverContract = function (domain, coinType) {
        return __awaiter(this, void 0, void 0, function () {
            var resolverAddress;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.resolver(domain)];
                    case 1:
                        resolverAddress = _a.sent();
                        return [2 /*return*/, new EthereumContract_1.default(resolver_1.default(resolverAddress, coinType), resolverAddress, this.provider)];
                }
            });
        });
    };
    Ens.prototype.callMethod = function (contract, method, params) {
        return __awaiter(this, void 0, void 0, function () {
            var result;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, contract.call(method, params)];
                    case 1:
                        result = _a.sent();
                        return [2 /*return*/, result[0]];
                }
            });
        });
    };
    Ens.prototype.checkSupportedDomain = function (domain) {
        return (domain === 'eth' ||
            (/^[^-]*[^-]*\.(eth|luxe|xyz|kred|addr\.reverse)$/.test(domain) &&
                domain.split('.').every(function (v) { return !!v.length; })));
    };
    Ens.prototype.checkNetworkConfig = function (source) {
        if (!source.network) {
            throw new configurationError_1.default(configurationError_1.ConfigurationErrorCode.UnsupportedNetwork, {
                method: this.name,
            });
        }
        if (!types_1.EnsSupportedNetwork.guard(source.network)) {
            this.checkCustomNetworkConfig(source);
        }
    };
    Ens.prototype.checkCustomNetworkConfig = function (source) {
        if (!this.isValidRegistryAddress(source.registryAddress)) {
            throw new configurationError_1.default(configurationError_1.ConfigurationErrorCode.InvalidConfigurationField, {
                method: this.name,
                field: 'registryAddress',
            });
        }
        if (!source['url'] && !source['provider']) {
            throw new configurationError_1.default(configurationError_1.ConfigurationErrorCode.CustomNetworkConfigMissing, {
                method: this.name,
                config: 'url or provider',
            });
        }
    };
    Ens.prototype.isValidRegistryAddress = function (address) {
        if (!address) {
            throw new configurationError_1.default(configurationError_1.ConfigurationErrorCode.CustomNetworkConfigMissing, {
                method: this.name,
                config: 'registryAddress',
            });
        }
        var ethLikePattern = new RegExp('^0x[a-fA-F0-9]{40}$');
        return ethLikePattern.test(address);
    };
    Ens.UrlMap = {
        1: 'https://mainnet.infura.io/v3/d423cf2499584d7fbe171e33b42cfbee',
        3: 'https://ropsten.infura.io/v3/d423cf2499584d7fbe171e33b42cfbee',
        4: 'https://rinkeby.infura.io/v3/d423cf2499584d7fbe171e33b42cfbee',
    };
    return Ens;
}(NamingService_1.NamingService));
exports.default = Ens;
